<?php

/**
 * @file
 * Display Suite forms integration.
 *
 * @todo how to get around seven's hardcoded and extremely annoying node_form_alter.
 */

/**
 * Implements hook_theme().
 */
function ds_forms_theme() {
  $theme_functions = array();

  $theme_functions['ds_forms_custom_form'] = array(
    'render element' => 'form',
  );

  return $theme_functions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_forms_form_field_ui_form_display_overview_form_alter(&$form, &$form_state) {
  if (_ds_forms_is_entity_type_supported($form['#entity_type'])) {

    // Add necessary variables for DS Field UI.
    $form['#mode'] = 'form';
    $form_state['no_view_mode_suggestions'] = TRUE;

    // Load Display Suite.
    form_load_include($form_state, 'inc', 'ds', 'includes/field_ui');
    ds_field_ui_fields_layouts($form, $form_state);
  }
}

/**
 * Implements hook_form_alter().
 */
function ds_forms_form_alter(&$form, &$form_state, $form_id) {
  if ($ds_form = ds_build_load($form, $form_id)) {
    if ($layout = ds_get_layout($ds_form->entity_type, $ds_form->bundle, 'form', FALSE)) {
      // Add the theming function and add the layout as a class.
      $form['#theme'] = array('ds_forms_custom_form');
      $class = strtr($layout['layout'], '_', '-');
      if ((isset($form['#attributes']['class']) && is_array($form['#attributes']['class'])) || !(isset($form['#attributes']['class']))) {
        $form['#attributes']['class'][] = $class;
      }
      elseif (isset($form['#attributes']['class']) && is_string($form['#attributes']['class'])) {
        $form['#attributes']['class'] .= ' ' . $class . ' ';
      }
    }
  }
}

/**
 * Helper function to determine if this form can be loaded.
 */
function ds_build_load($form, $form_id) {
  $ds_form = FALSE;
  if (isset($form['#entity_type']) && isset($form['#bundle']) && $form_id != 'field_ui_form_display_overview_form'
      && $form_id != 'field_ui_field_overview_form' && $form_id != 'field_ui_display_overview_form'
      && $form_id != 'field_ui_field_instance_edit_form' && $form_id != 'field_ui_field_edit_form') {
    $ds_form = new stdClass();
    $ds_form->entity_type = $form['#entity_type'];
    $ds_form->bundle = $form['#bundle'];
  }

  return $ds_form;
}

/**
 * Implements hook_preprocess_ds_forms_custom_form().
 */
function ds_forms_preprocess_ds_forms_custom_form(&$vars) {

  $form = ds_build_load($vars['form'], $vars['form']['#form_id']);
  if (!$form) {
    return;
  }

  $entity_type = $form->entity_type;
  $bundle = $form->bundle;

  if ($layout = ds_get_layout($entity_type, $bundle, 'form', FALSE)) {

    // Theme hook suggestions.
    $vars['theme_hook_suggestions'][] = $layout['layout'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type;
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type . '_' . $bundle;

    $form = &$vars['form'];

    // Add path to css file.
    if (isset($layout['css'])) {
      $build['css'] = array(
        '#attached' => array(
          'css' => array(
            $layout['path'] . '/' . $layout['layout'] . '.css',
          ),
        ),
      );
      drupal_render($build);
    }

    // Add the hidden region.
    $layout['regions']['hidden'] = 'Hidden';

    // If the layout has wrapper class lets add it.
    if (isset($layout['settings']['classes']['layout_class'])) {
      foreach ($layout['settings']['classes']['layout_class'] as $layout_class) {
        $vars['attributes']['class'][] = $layout_class;
      }
    }

    // Create region variables based on the layout settings.
    foreach ($layout['regions'] as $region_name => $region) {

      // Create the region content.
      if ($region_name == 'hidden') {
        ds_forms_render_region($form, $region_name, $layout);
      }
      else {
        $vars[$region_name] = ds_forms_render_region($form, $region_name, $layout);
      }

      // Add extras classes to the region.
      $vars[$region_name . '_classes'] = !empty($layout['settings']['classes'][$region_name]) ? ' ' . implode(' ', $layout['settings']['classes'][$region_name]) : '';

      // Add a wrapper to the region.
      if (empty($layout['flexible'])) {
        $vars[$region_name . '_wrapper'] = isset($layout['settings']['wrappers'][$region_name]) ? $layout['settings']['wrappers'][$region_name] : 'div';
      }
    }

    // Add custom attributes if any.
    if (!empty($layout['settings']['layout_attributes'])) {
      $layout_attributes = explode(',', $layout['settings']['layout_attributes']);
      foreach ($layout_attributes as $layout_attribute) {
        list($key, $attribute_value) = explode('|', $layout_attribute);
        $vars['attributes'][$key] = $attribute_value;
      }
    }

    // Ensure there is a class
    $vars['attributes']['class'][] = 'ds-form';

    // Add a layout wrapper
    $vars['layout_wrapper'] = isset($layout['settings']['layout_wrapper']) ? $layout['settings']['layout_wrapper'] : 'div';

    // Add the rest of the form elements
    $vars['drupal_render_children'] = drupal_render_children($vars['form']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ds_forms_theme_suggestions_ds_forms_custom_form_alter(array &$suggestions, array $variables) {
  $form = ds_build_load($variables['form'], $variables['form']['#form_id']);
  if (!$form) {
    return;
  }

  $entity_type = $form->entity_type;
  $bundle = $form->bundle;

  if ($layout = ds_get_layout($entity_type, $bundle, 'form', FALSE)) {
    // Theme hook suggestions.
    $suggestions[] = $layout['layout'];
    $suggestions[] = $layout['layout'] . '__' . $entity_type;
    $suggestions[] = $layout['layout'] . '__' . $entity_type . '_' . $bundle;
  }
}

/**
 * Render a form region.
 *
 * @param $content
 *   An array of content fields.
 * @param $region
 *   The name of region to render.
 * @param $layout
 *   The layout definition.
 *
 * @return string
 */
function ds_forms_render_region(&$content, $region, $layout) {
  $output = '';

  if (isset($layout['settings']['regions'][$region])) {
    foreach ($layout['settings']['regions'][$region] as $field) {
      if ($region == 'hidden') {
        $content[$field]['#access'] = FALSE;
      }
      else {
        $output .= drupal_render($content[$field]);
      }
    }
  }
  return $output;
}

/**
 * Determines if this entity type is supported by ds_forms.
 *
 * Currently supports all fieldable entity types.
 */
function _ds_forms_is_entity_type_supported($entity_type) {
  $info = \Drupal::entityManager()->getDefinition($entity_type);
  return !empty($info['fieldable']);
}
